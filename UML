@startuml
interface DataStructure {
    + void addItem(Item item)
    + void removeItem(String id)
    + Item getItem(String id)
    + Item[] getItems(String[] ids)
    + Item[] getItems(String first)
    + String IdGenerator()
    + String[] getAdded()
    + String[] getRemoved()
}

class Web implements Runnable {
    - static String loadFileContent(String filePath)
    + void run()

    class RootHandler implements HttpHandler
    class Page1Handler implements HttpHandler
    class Page2Handler implements HttpHandler
}

interface Subscriber {
    + void update()
}

class Observer {
    - List<Subscriber> subscribers = new ArrayList<>()
    + void addSubscriber(Subscriber subscriber)
    + void notifySubscribers()
    + void removeSubscribers()
}

class PasswordManager {
    - HashMap<String, String[]> passwords
    - final String salt
    - ArrayList<String[]> token

    + PasswordManager(String salt)
    - String hash(String input)
    + void loadFileContent(String filePath)
    + String verify(String username, String password)
    + boolean checkToken(String token)
}

final class File extends Observer implements DataStructure {
    - static final int n = 16
    - HashMap<String, Item> items
    - ArrayList<String> added
    - ArrayList<String> removed

    + void addItem(Item item)
    + void removeItem(String id)
    + Item getItem(String id)
    + Item[] getItems(String[] ids)
    + Item[] getItems(String first)
    + String IdGenerator()
    + String[] getAdded()
    + String[] getRemoved()
}

class Item {
    - String Id
    - final String Cipher
    - final String IV
    - int lvl
    - String prev
    - String next
    - final String date
    - final String author

    + getters and setters
}

class WebSocket {}

class Main {
    + Main()
}

class Client {
    - WebsocketClient websocketClient
}

class Sender implements Subscriber {
    + void update()
}

interface HttpHandler {}

Main --> Web
Main --> PasswordManager
Main --> File
Main --> WebSocket
Main --> Sender
Web --> HttpHandler
File --> Item
Observer --> Subscriber
Sender --> Subscriber
Client --> Web
@enduml
